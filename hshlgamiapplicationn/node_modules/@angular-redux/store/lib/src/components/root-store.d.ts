import { Store, Reducer, Middleware, StoreEnhancer, Unsubscribe, Dispatch } from 'redux';
import { NgZone } from '@angular/core';
import { Observable } from 'rxjs/Observable';
import 'rxjs/add/operator/map';
import 'rxjs/add/operator/filter';
import 'rxjs/add/operator/distinctUntilChanged';
import 'rxjs/add/operator/switchMap';
import { NgRedux } from './ng-redux';
import { Comparator } from './selectors';
import { ObservableStore } from './observable-store';
/** @hidden */
export declare class RootStore<RootState> extends NgRedux<RootState> {
    private ngZone;
    private _store;
    private _store$;
    constructor(ngZone: NgZone);
    configureStore: (rootReducer: Reducer<RootState>, initState: RootState, middleware?: Middleware[], enhancers?: StoreEnhancer<RootState>[]) => void;
    provideStore: (store: Store<RootState>) => void;
    getState: () => RootState;
    subscribe: (listener: () => void) => Unsubscribe;
    replaceReducer: (nextReducer: Reducer<RootState>) => void;
    dispatch: Dispatch<RootState>;
    select: <S>(selector?: string | number | symbol | (string | number)[] | ((s: RootState) => S) | undefined, comparator?: Comparator | undefined) => Observable<S>;
    configureSubStore: <SubState>(basePath: (string | number)[], localReducer: Reducer<SubState>) => ObservableStore<SubState>;
    private setStore(store);
    private storeToObservable;
}
